# -*- coding: utf-8 -*-
"""Untitled7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DuckMHYsmy84FSlvBue-XuV_D902KwRr
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# Title of the app
st.title("Southern United States Air Quality Visualization")

# Add a link to your GitHub repository
st.markdown("[GitHub repository for Air Quality Data](https://github.com/CJLawson175/ENG220_Group-6.git)")

# Preload the CSV file automatically from the GitHub repository
@st.cache_data
def load_data():
    # Correctly indented URL assignment
    file_url = 'https://raw.githubusercontent.com/CJLawson175/ENG220-Group-6/main/ENG220_Data_Filtered.csv'
    return pd.read_csv(file_url)

# Load the dataset
data = load_data()

# Check if the necessary columns are present
if 'Year' in data.columns and 'Month' in data.columns:
    # Create a new 'Date' column combining 'Year' and 'Month'
    data['Date'] = pd.to_datetime(data[['Year', 'Month']].assign(DAY=1))

    # Dropdown for selecting state
    states = data['State'].unique()
    selected_state = st.selectbox("Select State", states)

    # Filter data by selected state
    state_data = data[data['State'] == selected_state]

    # Dropdown for selecting county
    counties = state_data['County'].unique()
    selected_county = st.selectbox("Select County", counties)

    # Filter data by selected county
    filtered_data = state_data[state_data['County'] == selected_county]

    # Dropdown for selecting Y-axis column
    y_column = st.selectbox("Select Y-axis column", ["CO2 (ppm)", "NO2 (ppb)", "Ozone (ppm)", "PM2.5 (ug/m3)", "Monthly AQI Average"])

    # Dropdown for graph type
    graph_type = st.selectbox("Select Graph Type", ["Line", "Scatter", "Bar"])

    # Generate graph automatically based on dropdown selections
    if not filtered_data.empty:
        fig, ax = plt.subplots(figsize=(10, 6))

        # Plotting logic
        if graph_type == "Line":
            ax.plot(filtered_data['Date'], filtered_data[y_column], marker='o')
            ax.set_title(f"{y_column} vs Date (Line Plot) for {selected_county}, {selected_state}")

        elif graph_type == "Scatter":
            ax.scatter(filtered_data['Date'], filtered_data[y_column])
            ax.set_title(f"{y_column} vs Date (Scatter Plot) for {selected_county}, {selected_state}")

        elif graph_type == "Bar":
            ax.bar(filtered_data['Date'], filtered_data[y_column])
            ax.set_title(f"{y_column} vs Date (Bar Chart) for {selected_county}, {selected_state}")

        # Set labels
        ax.set_xlabel("Date")
        ax.set_ylabel(y_column)
        plt.xticks(rotation=45)  # Rotate x labels for better readability
        st.pyplot(fig)
    else:
        st.warning(f"No data available for {selected_county}, {selected_state}.")

    st.write("Tip: Some counties may not have recorded data for all pollutants.")
else:
    st.error("The CSV file must contain 'Year' and 'Month' columns.")
